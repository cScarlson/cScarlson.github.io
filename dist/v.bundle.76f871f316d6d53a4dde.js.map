{"version":3,"sources":["webpack:///./src/@motorman/vertices/core/decorators.ts","webpack:///./src/@motorman/core/utilities/utilities.ts","webpack:///./src/@motorman/core/utilities/patterns/other/deferred.ts","webpack:///./src/@motorman/core/utilities/index.ts","webpack:///./src/@motorman/vertices/core/defaults.js","webpack:///./src/@motorman/core/utilities/patterns/behavioral/chainOfRespnsibility.ts","webpack:///./src/@motorman/core/utilities/patterns/behavioral/command.ts","webpack:///./src/@motorman/core/utilities/patterns/behavioral/mediator/eventhub.ts","webpack:///./src/@motorman/vertices/core/element-engine.ts","webpack:///./src/@motorman/vertices/core/core.ts","webpack:///./src/@motorman/vertices/core/api.js","webpack:///./src/@motorman/vertices/index.ts"],"names":["DEFAULT_DESCRIPTOR","writable","configurable","enumerable","Element","details","options","data","decorator","members","Class","meta","Component","Directive","Pipe","Service","Metadata","klass","$members","Map","$observedAttributes","$watchers","$elements","$attrs","$listeners","$subscriptions","metadata","this","decorators","object","ns","keys","split","length","shift","Function","namespace","key","value","set","get","observe","attr","thus","target","descriptor","constructor","action","true","false","process","arguments","hasGet","hasSet","hasGetOrSet","hasGetAndSet","name","alias","handler","selector","isHost","matches","RegExp","exec","match","tagName","type","console","log","observee","observer","element","listener","message","CSV","collection","fields","delimiter","$table","$values","$lines","matrix","lines","span","Object","reduce","o","x","i","width","j","height","y","row","rows","col","columns","_id","field","record","column","line","Math","max","apply","join","tabs","Array","map","concat","replace","csv","slice","array","datum","bind","push","Utilities","first","more","k","extend","null","undefined","0","splat","window","setTimeout","timeout","delay","params","call","clearTimeout","fn","timer","context","threshhold","scope","deferTimer","now","Date","last","invoke","c","r","random","toString","s","path","drill","str","a","b","val","escapeHTML","re","matcher","string","result","values","len","url","document","createElement","href","hash","host","hostname","origin","pathname","port","protocol","search","methods","prototype","sortByKey","size","unit","$","toFixed","$bytes","$KB","$MB","$GB","$TB","$PB","bytes","KB","MB","GB","TB","PB","auto","Infinity","datasets","n","Number","round","Deferred","_resolve","_reject","promise","Promise","exe","resolve","reject","DefaultServicesSandbox","utils","DefaultComponentSandbox","Handler","e","detail","ChainOfResponsibility","config","responders","super","cancelable","bubbles","cancelBubble","defaultPrevented","handlers","propagate","event","CustomEvent","next","stopPropagation","execute","respond","stopImmediatePropagation","StrictCommand","EventTarget","component","command","composeCommand","item","composeExecutor","Channels","Comm","channels","channel","dispatchEvent","addEventListener","removeEventListener","ConstructorProxy","comm","Sandbox","director","Target","args","sandbox","Reflect","construct","publish","MemberProxy","source","has","receiver","deleteProperty","MethodProxy","TemplateListener","TemplateManagementOptions","reAttrIn","reStructural","reListener","reListenerValue","MutationManager","MutationObserver","changes","mutation","attributeName","getAttributeNode","attributes","childList","subtree","disconnect","dTemplateReady","$variables","templateListeners","mutations","fragment","DocumentFragment","template","content","pipeNodeHandler","nodeProcessors","processAttributeNodeRepeat","processElementNode","processTextNode","processCommentNode","pipeAttributeHandler","attributeProcessors","handlePropertyBinding","handleListenerBinding","$elementRefs","elementRefs","$attrRefs","attrRefs","listeners","node","cor","isConnected","parentNode","parent","previousSibling","previous","nextSibling","firstChild","child","parseNode","response","nodeType","hasAttribute","attribute","handleStructuralRepeat","ownerElement","instructor","property","items","id","elements","removeAttribute","interpolate","outerHTML","attrs","processAttributeNode","owner","test","createBindingInvoker","method","pTemplateReady","innerHTML","then","bindMutationObservers","bindElementNodeRefs","bindAttributeNodeRefs","bindListeners","destroy","connect","querySelector","forEach","addNodeListener","construction","Proxy","state","membersProxy","methodsProxy","proxy","properties","getOwnPropertyNames","methodBlacklist","from","watchers","mapExecutor","subscriptions","surrogate","create","observedAttributes","templateOptions","HTMLElement","$utils","getConfig","$content","$comparitors","handleTemplate","cycle","handleProxyInvokation","subscribe","bindAttribute","getOwnPropertyDescriptor","getAttribute","setAttribute","v","defineProperty","attrName","oldVal","newVal","$watcher","detachedCallback","disconnectedCallback","refresh","customElements","prepare","define","DEFAULT_CONFIG","bootstrap","dataset","slug","behavior","components","children","resolveScope","services","Vertex","Vertices","Core","Facade","V","register","dConfiguration","pConfiguration","dInitialization","pInitialization","engine","configuration","Error","arm","service","Constructor","definition","startServices","startService","_service","ServiceSandbox","init","warn","ComponentSandbox","instance","core","configure","registerService","registerComponent"],"mappings":"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","file":"v.bundle.76f871f316d6d53a4dde.js","sourcesContent":["\r\n/*\r\n\r\nDecorators\r\n\r\nClass decorators should always contain a \"meta\" property (on their descriptor, Class, or [root] Prototype) with a \"members\" object.\r\nMember decorators always assign metadata to a \"meta\" object on their Class under members[key] providing data for their purpose.\r\nDecorators should have the capability to be leveraged compositively with each other, adding \"meta\" data to the descriptor.\r\n\r\n@observee('prop') x: any;  // prepares metadata for observableAttributes (of \"prop\" with alias \"x\")\r\n@observer('prop') handleChange(...?) {}  // prepares metadata for handler called from attributedChangedCallback\r\n@element('tagName.class[attr]') element: HTMLElement;  // prepares metadata to select & bind an element to component['element'] (if not arguments.length then return HostElement or FirstChild or querySelector('*') or descriptor.name)\r\n@attr('tagName.class[attr]') attr: Attr;  // prepares metadata to select & bind an element's attribute-node to component['attr'] (if not \"[attr]\" then return descriptor.name)\r\n@listener('click') handleClick() {}  // prepares metadata to handle \"click\" on HostElement\r\n----\r\n@listener('click') @element('tagName.class[attr]') handleClick({ target }) {}  // prepares metadata to handle \"click\" on metadata.selector of type \"element\"\r\n@listener('change') @attr('tagName.class[attr]') handleChange({ ownerElement }) {}  // prepares metadata to handle \"change\" on metadata.selector of type \"attr\"\r\n\r\n*/\r\n\r\nvar DEFAULT_DESCRIPTOR = { writable: true, configurable: true, enumerable: true };\r\n\r\n\r\nclass DecoratorUtilities {  // DEP\r\n    namespace(object: any, ns: string, keys: string[] = ns.split('.')): boolean {\r\n        while (keys.length) if (!object[ keys[0] ]) object[ keys.shift() ] = { };\r\n        return !!(new Function(`return constructor.${ns};`))();\r\n    }\r\n    ensure(object, namespace, key, value) {\r\n        var exists = this.namespace(object, namespace);\r\n        var set = new Function('value', `object.${namespace} = value;`);\r\n        // var set = new Function('value', `object.${namespace}.${key} = value;`);\r\n        var get = new Function(`return object.${namespace};`);\r\n        \r\n        set(value);\r\n        return get();\r\n    }\r\n    meta(object, key, meta) {\r\n        this.namespace(object, 'meta.members');\r\n        object.meta.members[key] = meta;\r\n    }\r\n}\r\n\r\nfunction Element(details: any, options?: any): any {\r\n    var data = { ...details, options, decorator: 'element', members: {} };\r\n    \r\n    return function get(Class: any): any {\r\n        Class.meta = data;\r\n        return { ...data, Class };\r\n    };\r\n}\r\n\r\nfunction Component() {}\r\nfunction Directive() {}\r\nfunction Pipe() {}\r\nfunction Service() {}\r\n\r\ntype ObserveeMetadata = {\r\n    decorator: 'attribute:observee',\r\n    name: string,\r\n    alias: string,\r\n    hasGet: boolean,\r\n    hasSet: boolean,\r\n    hasGetOrSet: boolean,\r\n    hasGetAndSet: boolean,\r\n};\r\ntype ObserverMetadata = {\r\n    decorator: 'attribute:observer',\r\n    name: string,\r\n    attr: string,\r\n    handler: (...splat: any[]) => any,\r\n};\r\ninterface ElementRefMetadata {\r\n    decorator: 'reference:element';\r\n    name: string;\r\n    key: string;\r\n    selector: string;\r\n    isHost: boolean;\r\n};\r\ninterface AttrRefMetadata {\r\n    decorator: 'reference:attribute';\r\n    name: string;\r\n    key: string;\r\n    selector: string;\r\n    isHost: boolean;\r\n};\r\ntype ListenerMetadata = {\r\n    decorator: 'handler:dom',\r\n    name: string,\r\n    key: string,\r\n    type: string,\r\n    handler: (...splat: any[]) => any,\r\n    isHost: boolean;\r\n};\r\ntype CommMetadata = {\r\n    decorator: 'handler:comm',\r\n    name: string,\r\n    key: string,\r\n    type: string,\r\n    handler: (...splat: any[]) => any,\r\n};\r\n\r\nclass Metadata {  // TODO: create types for maps\r\n    public $members: Map<string, any> = new Map();\r\n    public $observedAttributes: Map<string, any> = new Map();\r\n    public $watchers: Map<string, any> = new Map();\r\n    public $elements: Map<string, any> = new Map();\r\n    public $attrs: Map<string, any> = new Map();\r\n    public $listeners: Map<string, any> = new Map();\r\n    public $subscriptions: Map<string, any> = new Map();\r\n    \r\n    constructor(protected klass: any) {\r\n        var { metadata } = klass;  // might already exist\r\n        var { $members, $observedAttributes, $watchers, $elements, $attrs, $listeners, $subscriptions } = (metadata || {});\r\n        \r\n        this.$members = $members || this.$members;  // prefer existing if available\r\n        this.$observedAttributes = $observedAttributes || this.$observedAttributes;  // prefer existing if available\r\n        this.$watchers = $watchers || this.$watchers;  // prefer existing if available\r\n        this.$elements = $elements || this.$elements;  // prefer existing if available\r\n        this.$attrs = $attrs || this.$attrs;  // prefer existing if available\r\n        this.$listeners = $listeners || this.$listeners;  // prefer existing if available\r\n        this.$subscriptions = $subscriptions || this.$subscriptions;  // prefer existing if available\r\n        \r\n        klass.metadata = this;  // ensure has structure of this while this.${{x}} originates from first issuance and subsequently klass\r\n        return this;  // `this` maintains references to those members from klass.metadata\r\n    }\r\n    \r\n}\r\n\r\nvar decorators = new (class Decorators extends DecoratorUtilities {\r\n    \r\n    /**\r\n     * @intention Provide a convenience method for mapping to correct behavior depending on input type to keep other methods clean.\r\n     *      * If member is datum : this.observee\r\n     *      * If member is method: this.observer\r\n     *      * Note: data-members are not created until class instance construction (value === undefined)\r\n     */\r\n    observe = (attr?: string): any => {\r\n        var thus = this;\r\n        \r\n        return function get(target: any, key: string, descriptor: any = {}): any {\r\n            var { constructor } = target;\r\n            var { value } = descriptor;\r\n            var metadata = new Metadata(constructor);\r\n            var descriptor = { ...descriptor, ...DEFAULT_DESCRIPTOR };\r\n            var action = { true: 'observer', false: 'observee' }[ <any>!!value ];  // this.observee || this.observer\r\n            var process = thus[action](attr);\r\n            var data = process(...arguments);\r\n            \r\n            metadata.$members.set(key, data);\r\n            return descriptor;\r\n        };\r\n    };\r\n    observee(attr?: string): any {  // @usage: @observe('options') options: any;\r\n        var thus = this;\r\n        \r\n        return function get(target: any, key: string, descriptor: any = {}): any {\r\n            var { constructor } = target;\r\n            var { get, set } = descriptor, hasGet = !!get, hasSet = !!set, hasGetOrSet = (hasGet || hasSet), hasGetAndSet = (hasGet && hasSet);\r\n            var metadata = new Metadata(constructor);\r\n            var name = (attr || key), alias = key;  // name === alias if !attr\r\n            var data = { decorator: 'attribute:observee', name, alias, hasGet, hasSet, hasGetOrSet, hasGetAndSet };\r\n            \r\n            if (!hasGetOrSet) descriptor.writable = true;  // do not declare WHATSOEVER unless !hasGetOrSet\r\n            metadata.$members.set(key, data);\r\n            metadata.$observedAttributes.set(key, data);\r\n            \r\n            return data;\r\n        };\r\n    };\r\n    observer(attr: string): any {  // @usage: @observe('options') handleOptionsChange(val, old) {}\r\n        var thus = this;\r\n        \r\n        return function get(target: any, key: string, descriptor: any = {}): any {\r\n            var { constructor } = target;\r\n            var descriptor = { ...descriptor, ...DEFAULT_DESCRIPTOR };\r\n            var { value: handler } = descriptor;\r\n            var metadata = new Metadata(constructor);\r\n            var name = key;\r\n            var data = { decorator: 'attribute:observer', name, attr, handler };\r\n            \r\n            metadata.$members.set(key, data);\r\n            metadata.$watchers.set(attr, data);\r\n            \r\n            return data;\r\n        };\r\n    };\r\n    \r\n    element(selector: string): any {\r\n        var thus = this;\r\n        var isHost = (selector === 'this');\r\n        \r\n        return function get(target: any, key: string, descriptor: any = {}): any {\r\n            var { constructor } = target;\r\n            var descriptor = { ...descriptor, ...DEFAULT_DESCRIPTOR };\r\n            var metadata = new Metadata(constructor);\r\n            var name = key;\r\n            var data = { decorator: 'reference:element', name, key, selector, isHost };\r\n            \r\n            metadata.$members.set(key, data);\r\n            metadata.$elements.set(key, data);\r\n            \r\n            return descriptor;\r\n        };\r\n    };\r\n    \r\n    attr(selector: string): any {\r\n        var thus = this;\r\n        var re = new RegExp(/^(.*)\\[(.+)\\]$/);\r\n        var matches = re.exec(selector), [ match, tagName, attr ] = matches;\r\n        var isHost = (tagName === 'this');\r\n        \r\n        return function get(target: any, key: string, descriptor: any = {}): any {\r\n            var { constructor } = target;\r\n            var descriptor = { ...descriptor, ...DEFAULT_DESCRIPTOR };\r\n            var metadata = new Metadata(constructor);\r\n            var name = attr;\r\n            var data = { decorator: 'reference:attribute', name, key, selector, isHost };\r\n            \r\n            metadata.$members.set(key, data);\r\n            metadata.$attrs.set(key, data);\r\n            \r\n            return descriptor;\r\n        };\r\n    };\r\n    \r\n    listener(type: string) {\r\n        var thus = this;\r\n        var isHost = !type;\r\n        \r\n        return function get(target: any, key: string, descriptor: any = {}): any {\r\n            console.log('----------', target, key, descriptor);\r\n            var { constructor } = target;\r\n            // var descriptor = { ...descriptor, ...DEFAULT_DESCRIPTOR };\r\n            var { value: handler } = descriptor;\r\n            var metadata = new Metadata(constructor);\r\n            var name = key;\r\n            var data = { decorator: 'handler:dom', name, key, type, handler, isHost };\r\n            \r\n            metadata.$members.set(key, data);\r\n            metadata.$listeners.set(key, data);\r\n            \r\n            return descriptor;\r\n        };\r\n    };\r\n    \r\n    message(type: string): any {  // TODO\r\n        var thus = this;\r\n        \r\n        return function get(target: any, key: string, descriptor: any = {}): any {\r\n            var { constructor } = target;\r\n            var descriptor = { ...descriptor, ...DEFAULT_DESCRIPTOR };\r\n            var { value: handler } = descriptor;\r\n            var metadata = new Metadata(constructor);\r\n            var name = key;\r\n            var data = { decorator: 'handler:comm', name, key, type, handler };\r\n            \r\n            metadata.$members.set(key, data);\r\n            metadata.$subscriptions.set(key, data);\r\n            \r\n            return descriptor;\r\n        };\r\n    };\r\n\r\n})();\r\n\r\n\r\n\r\n// function attr(attr?: string): any {\r\n    \r\n//     return function get(target: any, name: string, descriptor: any = {}): any {\r\n//         var { constructor } = target;\r\n//         var { get, set } = descriptor, hasGetOrSet = !!(get || set);\r\n//         var descriptor = { ...descriptor };\r\n        \r\n//         if (!hasGetOrSet) descriptor.writable = true;\r\n//         constructor.observedAttributes = constructor.observedAttributes || [ ];\r\n//         constructor.observedAttributes.push(name);\r\n        \r\n//         return descriptor;\r\n//     };\r\n// }\r\n// function watch(attr: string): any {\r\n    \r\n//     return function get(target: any, name: string, descriptor: any): any {\r\n//         var { constructor } = target;\r\n//         var descriptor = { ...descriptor, ...DEFAULT_DESCRIPTOR };\r\n//         var { value: handler } = descriptor;\r\n        \r\n//         constructor.watchers = constructor.watchers || new Map();\r\n//         constructor.watchers.set(attr, { attr, name, handler });\r\n        \r\n//         return descriptor;\r\n//     };\r\n// }\r\n\r\n// function bind(type: string): any {  // TODO: rename to \"event\"\r\n    \r\n//     return function get(target: any, name: string, descriptor: any): any {\r\n//         var { constructor } = target;\r\n//         var descriptor = { ...descriptor, ...DEFAULT_DESCRIPTOR };\r\n//         var { value: handler } = descriptor;\r\n        \r\n//         constructor.listeners = constructor.listeners || [ ];\r\n//         constructor.listeners.push({ type, name, handler });\r\n        \r\n//         return descriptor;\r\n//     };\r\n// }\r\n\r\n// function handle(channel: string): any {\r\n    \r\n//     return function get(target: any, name: string, descriptor: any): any {\r\n//         var { constructor } = target;\r\n//         var descriptor = { ...descriptor, ...DEFAULT_DESCRIPTOR };\r\n//         var { value } = descriptor;\r\n        \r\n//         constructor.subscriptions = constructor.subscriptions || [ ];\r\n//         constructor.subscriptions.push({ type: channel, name, value });\r\n        \r\n//         return descriptor;\r\n//     };\r\n// }\r\n\r\n// function cashe$(options: any = {}): any {\r\n//     return function get(): any {};\r\n// }\r\n// function casheP(options: any = {}): any {\r\n//     return function get(): any {};\r\n// }\r\n\r\n// const observe = decorators.observe;\r\n// const observee = decorators.observee;\r\n// const observer = decorators.observer;\r\n// //\r\n// const element = decorators.element;\r\n// const attr = decorators.attr;\r\n// //\r\n// const listener = decorators.listener;\r\n// const comm = decorators.comm;\r\n\r\nconst {\r\n    observe, observee, observer,\r\n    element, attr,\r\n    listener, message,\r\n} = decorators;\r\n\r\nexport { Element, Component, Directive, Pipe, Service };\r\nexport { observe, observee, observer };\r\nexport { element, attr };\r\nexport { listener, message };\r\n// export { attr, watch };\r\n// export { bind };\r\n// export { handle };\r\n","\r\nvar CSV = new class CSV {\r\n    \r\n    // JSON.stringify(value[, replacer[, space]])\r\n    stringify(collection, fields, delimiter) {  // Word Art Cloud: wordToWeight() & weightToWord()\r\n        /**\r\n         * Given: map.get(fields[i]).push( collection[j][ fields[i] ] )\r\n         * Then: every column (fields[i]) contains an equal number of values as any other column.\r\n         * Because: map.get(fields[i])[0] === collection[j][ fields[i] ]\r\n         */\r\n        var $table = new Map();  // Map { 0 => { a, b, c, ... } }\r\n        var $values = new Map();  // Map { a => [ x, y, z, ... ] }\r\n        var $lines = new Map();  // Map { 0 => [ x, y, z, ... ] }\r\n        var matrix = [ ];  // [ [a,b,c,...], [a,b,c,...], ... ]\r\n        var lines = [ ];\r\n        var span = 0;\r\n        \r\n        if (!fields) fields = Object.keys( collection.reduce( (o, x) => ({ ...o, ...x }), { } ) );  // gets all available keys across all objects in collection\r\n        \r\n        for (let i = 0, width  = collection.length; i < width;  i++)\r\n        for (let j = 0, height = fields.length;     j < height; j++)\r\n\t\t(function create(value, [x, y], row, i, rows, col, j, columns) {\r\n            var _id = x, field = col;\r\n            var record = $table.get(_id) || { _id };\r\n            var column = $values.get(col) || [ ];\r\n            var line = $lines.get(x) || [ ];\r\n            \r\n            if ({ 'undefined': true }[ value ]) value = '';\r\n            matrix[x] = matrix[x] || [ ];\r\n            matrix[x][y] = record[field] = column[x] = line[y] = value;\r\n            \r\n            $table.set(_id, record);  // ensure gets set first time\r\n            $values.set(col, column);  // ensure gets set first time\r\n            $lines.set(x, line);  // ensure gets set first time\r\n            \r\n            span = Math.max.apply(null, [ span, col.length, `${value}`.length ]);\r\n            lines[x] = line.join(',');\r\n            \r\n        })(collection[i][ fields[j] ], [i, j], collection[i], i, collection, fields[j], j, fields);\r\n        \r\n        var tabs = Array.apply(null, { length: span });\r\n        var delimiter = {\r\n            '\\t': tabs.map( () => '\\t' ),\r\n            '\\s': tabs.map( () => '\\s' ),\r\n            'undefined': [ ],\r\n        }[ delimiter ].join('');\r\n        var columns = fields.join(',');\r\n        var csv = [ columns ].concat(lines).join('\\n');\r\n        var csv = csv.replace(/,/img, `,${delimiter}`);\r\n        \r\n        return csv;\r\n    }\r\n    \r\n    parse(csv) {\r\n        var lines = csv.split(/\\n+/img), [ fields ] = lines, fields = fields.split(/,\\t*/), rows = lines.slice(1);\r\n\t\tvar collection = rows.reduce( getObject.bind(this, fields), [ ] );\r\n        \r\n        function getObject(fields, array, line, row, lines) {\r\n            var o = fields.reduce( getValue.bind(this, line), { } );\r\n            array.push(o);\r\n            \r\n            function getValue(line, o, key, i, fields) {\r\n                var values = line.split(/,\\s*/), value = values[i], datum = { [key]: value };\r\n                return { ...o, ...datum };\r\n            }\r\n            \r\n            return array;\r\n        }\r\n        \r\n\t\treturn collection;\r\n    }\r\n    \r\n};\r\n\r\n/**\r\n * @ URLComponents\r\n */\r\nclass URLComponents {\r\n    hash: string = '';\r\n    host: string = '';\r\n    hostname: string = '';\r\n    href: string = '';\r\n    origin: string = '';\r\n    pathname: string = '';\r\n    port: string = '';\r\n    protocol: string = '';\r\n    search: string = '';\r\n    \r\n    constructor(url) {\r\n        var parser = document.createElement('a');\r\n        parser.href = url;\r\n\r\n        this.hash = parser.hash;\r\n        this.host = parser.host;\r\n        this.hostname = parser.hostname;\r\n        this.href = parser.href;\r\n        this.origin = parser.origin;\r\n        this.pathname = parser.pathname;\r\n        this.port = parser.port;\r\n        this.protocol = parser.protocol;\r\n        this.search = parser.search;\r\n\r\n        return this;\r\n    }\r\n    \r\n}\r\n\r\nclass ParameterMap {\r\n    name: string = '';\r\n    value: string = '';\r\n    \r\n    constructor(str) {\r\n        var pair = str.split('=');\r\n        this.name = pair[0];\r\n        this.value = pair[1];\r\n        return this;\r\n    }\r\n    \r\n}\r\n\r\nclass QueryMap {\r\n    \r\n    constructor(q) {\r\n        var query = decodeURIComponent(q);\r\n        var exp = /[^\\?|\\&]([^=]+)\\=([^&]+)/g;\r\n        var res = query.match(exp);\r\n\r\n        for (var i = 0, len = res.length; i < len; i++) {\r\n            var map = new ParameterMap(res[i]);\r\n            this[map.name] = map.value;\r\n        }\r\n\r\n        return this;\r\n    }\r\n    \r\n}\r\n\r\nclass Utilities {\r\n    CSV: any = CSV;\r\n    console: any = console;\r\n    \r\n    constructor() {\r\n        return this;\r\n    }\r\n      \r\n    noop() {}\r\n    \r\n    extend(object, first?, ...more) {\r\n        var o = Object.keys(first).reduce( (o, k) => (o[k] = first[k], o), object );\r\n        if (more.length) return this.extend(object, ...more);\r\n        return o;\r\n    }\r\n    \r\n    is(value) {\r\n        var isnt = { null: true, undefined: true, '': true, 0: false }[ value ];\r\n        return !isnt;\r\n    }\r\n    \r\n    timeout(handler, ...splat) {\r\n        var cancel = window.setTimeout(handler, ...splat);\r\n        return cancel;\r\n    }\r\n    \r\n    enqueue(handler, ...splat) {\r\n        var result = this.timeout(handler, 0, ...splat);\r\n        return result;\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * @intention\r\n     *  * Leverage global.setTimeout for intervals instead of global.setInterval.\r\n     * @patterns { Curry }\r\n     * @usage \r\n     *  * var clear = utils.interval( () => console.log('called!'), 1000 );\r\n     *  * setTimeout(clear, (1000 * n) );  // clears interval after n seconds\r\n     */\r\n    interval(handler, delay, ...splat) {\r\n        var thus = this, timeout = thus.timeout(set, delay, ...splat);\r\n        \r\n        function set(...params) {\r\n            if ( !timeout ) return console.log('break');  // > -1\r\n            handler.call(this, ...params);\r\n            timeout = thus.timeout(set, delay, ...splat);\r\n        }\r\n        function clear() {\r\n            clearTimeout(timeout);\r\n            timeout = null;\r\n            return !timeout;  // assert is cleared\r\n        }\r\n        \r\n        return clear;\r\n    }\r\n    \r\n    debounce(fn, delay) {  // # thx Remy Sharp\r\n        var timer = null;\r\n        \r\n        function _debounce(...splat) {\r\n            var context = this;\r\n            clearTimeout(timer);\r\n            timer = setTimeout( () => fn.call(context, ...splat), delay);\r\n        };\r\n        \r\n        return _debounce;\r\n    }\r\n    \r\n    throttle(fn, threshhold, scope) {  // # thx Remy Sharp\r\n        var threshhold = threshhold || 250, last, deferTimer;\r\n        \r\n        function _throttle(...splat) {\r\n            var context = scope || this, now = +(new Date()), last = now, final = (last + threshhold);\r\n            var invoke = () => ( fn.call(context, ...splat), last = now );\r\n            \r\n            if (!last || now >= final) return invoke();  // don't hold on to it\r\n            clearTimeout(deferTimer);\r\n            deferTimer = setTimeout(invoke, threshhold);\r\n        };\r\n        \r\n        return _throttle;\r\n    }\r\n    \r\n    uuid() {\r\n        function replace(c) {\r\n        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n        return v.toString(16);\r\n        }\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, replace);\r\n    }\r\n        \r\n    escapeHTML(s) {\r\n        return s.replace(/[&\"<>]/g, function (c) {\r\n            return {\r\n                '&': '&amp;',\r\n                '\"': '&quot;',\r\n                '<': '&lt;',\r\n                '>': '&gt;'\r\n            }[c];\r\n        });\r\n    }\r\n    \r\n    \r\n    drill(data: any, path: string): any {  // @usage: var x = drill('a.b.c.id', { a: { b: { c: { id: x } } } });\r\n        var keys = path.split('.'), key = keys.shift();\r\n        \r\n        if (!data) return undefined;  // not unlike an operation of { 'existent': true }[ 'absent' ] > undefined\r\n        if (!key) return data;  // data is final\r\n        \r\n        return this.drill( data[key], keys.join('.') );  // TCO/TCE\r\n    }\r\n\r\n\r\n    /**\r\n     * @ Inspiration: Douglas Crockford (String.prototype.supplant)\r\n     */\r\n    interpolate(str) {\r\n        return (o) => str.replace(/{{([^{}]*)}}/g, (a, b) => {\r\n            var value = this.drill(o, b), val = ''+value;  // default & convert to string\r\n            \r\n            if (!value) val = a;  // leave {{key[.x[.y[.z]]]}} syntax in string so that multiple iterations of interpolation may occur\r\n            else if (value.call) val = ''+value();  // get return value\r\n            \r\n            return this.escapeHTML(val);  // assume rational value for string result\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @ THX: Douglas Crockford (String.prototype.supplant)\r\n     * @ INTERPOLATE\r\n     */\r\n    interpolateShallow(str) {\r\n        return (o) => {\r\n            return str.replace(/{{([^{}]*)}}/g, (a, b) => {\r\n                var val = ''+o[b];\r\n                return this.escapeHTML(val);  // TODO: escape HTML-Entities\r\n            });\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @ THX: Douglas Crockford (String.prototype.supplant)\r\n     * @ INSECURE_INTERPOLATE\r\n     */\r\n    INSECURE_INTERPOLATE(str) {\r\n        return function interpolate(o) {\r\n            return str.replace(/{{([^{}]*)}}/g, function (a, b) {\r\n                var val = ''+o[b];\r\n                return val;  // TODO: escape HTML-Entities\r\n            });\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @ EXTERPOLATE | PARSE ROUTE-URI\r\n     */\r\n    exterpolate(str) {\r\n        var str = str || '';\r\n        var re = /:[^\\s/]+|{+[^\\s/]+}+/g;\r\n        var matcher = new RegExp(str.replace(re, '([\\\\w-]+)'));\r\n\r\n        return function getValues(string) {\r\n            if (!string.match(matcher)) return false;\r\n            var string = string || '';\r\n            var result = string.match(matcher);\r\n            var keys = str.match(re);\r\n            var values = result.slice(1);\r\n            var map = {};\r\n\r\n            if (keys && values) {\r\n                for (var i = 0, len = keys.length; i < len; i++) {\r\n                    var key = keys[i].replace(/[:{}]+/g, '');\r\n                    var val = values[i];\r\n                    if (key !== val) map[key] = val;\r\n                }\r\n            }\r\n\r\n            return map;\r\n        };\r\n    }\r\n    \r\n    parseURL(url) {\r\n        var a = document.createElement('a');\r\n        a.href = url;\r\n        \r\n        return {\r\n            hash: a.hash,\r\n            host: a.host,\r\n            hostname: a.hostname,\r\n            href: a.href,\r\n            origin: a.origin,\r\n            pathname: a.pathname,\r\n            port: a.port,\r\n            protocol: a.protocol,\r\n            search: a.search,\r\n        };\r\n    }\r\n    \r\n    sortByKey(k, a, b) {  // Sort by Multiple keys (Reusable) using sortByKey()\r\n        // USAGE:\r\n        // var sort = sortByKey.bind(collection, 'x');\r\n        // collection.sort(sort);\r\n        if (a[k] > b[k]) return  1;\r\n        if (a[k] < b[k]) return -1;\r\n        return 0;\r\n    }\r\n    \r\n    // Sort by Multiple keys (Reusable + Optimized) using Methods-Array\r\n    priorityMethodSort(methods, a, b) {\r\n        // USAGE:\r\n        // var sort = prioritySort.bind(collection, [ sort$A, sort$B, sort$C, sort$D ]);\r\n        // collection.sort(sort);\r\n        var i = 0, methods = Array.prototype.slice.call(methods || [ ], 0);\r\n        while (i === 0 && methods.length) i = methods.shift().call(this, a, b);\r\n        return i;\r\n    }\r\n    \r\n    priorityKeySort(keys, a, b) {  // Sort by Multiple keys (Reusable + Optimized) using Reusable prioritySort()\r\n        // USAGE:\r\n        // var sort = prioritySort.bind(collection, [ 'a', 'b', 'c', 'd' ]);\r\n        // collection.sort(sort);\r\n        // console.log('>', collection);\r\n        // >  [\r\n        //       { \"a\": 0, \"b\": 0, \"c\": 0, \"d\": 0 },\r\n        //       { \"a\": 0, \"b\": 1, \"c\": 2, \"d\": 2 },\r\n        //       { \"a\": 0, \"b\": 1, \"c\": 2, \"d\": 3 },\r\n        //       { \"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1 },\r\n        //       { \"a\": 1, \"b\": 2, \"c\": 2, \"d\": 1 },\r\n        //       { \"a\": 1, \"b\": 2, \"c\": 3, \"d\": 1 },\r\n        //       { \"a\": 2, \"b\": 2, \"c\": 2, \"d\": 2 },\r\n        //       { \"a\": 3, \"b\": 3, \"c\": 3, \"d\": 3 }\r\n        //    ]\r\n        var i = 0, keys = Array.prototype.slice.call(keys || [ ], 0);\r\n        while (i === 0 && keys.length) i = this.sortByKey.call(this, keys.shift(), a, b);\r\n        return i;\r\n    }\r\n    \r\n    getFileSize(size, unit = 'auto') {  // size: number, unit: 'auto'|'byte'|'KB'|'MG'|'GB'|'TB'|'PB'\r\n        var $ = this.toFixed.bind(this);\r\n        var $bytes = $(size || 0), $KB = $($bytes / 1024), $MB = $($KB / 1024), $GB = $($MB / 1024), $TB = $($GB / 1024), $PB = $($TB / 1024);\r\n        var bytes = `${$bytes} bytes`, KB = `${$KB} KB`, MB = `${$MB} MB`, GB = `${$GB} GB`, TB = `${$TB} TB`, PB = `${$PB} PB`;\r\n        var $auto = $bytes;\r\n        var auto;\r\n        var values = { bytes, KB, MB, GB, TB, PB, auto: undefined };\r\n        var result = { unit: '', value: Infinity };\r\n        var datasets = [\r\n        { unit: 'bytes', value: $bytes },\r\n        { unit: 'KB', value: $KB },\r\n        { unit: 'MB', value: $MB },\r\n        { unit: 'GB', value: $GB },\r\n        { unit: 'TB', value: $TB },\r\n        { unit: 'PB', value: $PB },\r\n        ];\r\n        while ( (result.value / 1024) >= 1 && datasets.length ) result = datasets.shift();\r\n        values.auto = `${result.value} ${result.unit}`;\r\n        \r\n        \r\n        \r\n        return values[unit];\r\n    }\r\n    \r\n    toFixed(n) { return Number( Math.round(+(n + 'e2')) + 'e-2' ); }\r\n    \r\n    exists(n) { return !!~n; }\r\n    \r\n}\r\n\r\nexport { Utilities };\r\n","\r\n/**\r\n * @name: Deferred Promise\r\n * @intention\r\n *  * Externalize the function of a Promise's \"Executor\" parameters so that fulfillment & rejection\r\n *  * can be performed at a later time.\r\n */\r\nclass Deferred<T> {\r\n    private _resolve: Function = () => {};\r\n    private _reject: Function = () => {};\r\n    public promise: Promise<T> = new Promise<T>( this.exe.bind(this) );\r\n        \r\n    constructor() {}\r\n    \r\n    private exe(resolve, reject) {\r\n        this._resolve = resolve;\r\n        this._reject = reject;\r\n    }\r\n    \r\n    resolve(data) {\r\n        this._resolve(data);\r\n        return this.promise;\r\n    }\r\n    reject(data) {\r\n        this._reject(data);\r\n        return this.promise;\r\n    }\r\n    \r\n}\r\n\r\nexport { Deferred };\r\n","\r\nexport { Utilities } from './utilities';\r\nexport { keycodes } from './keycodes';\r\n// export { patterns } from './patterns';\r\n// export { ds } from './ds';\r\nexport { Deferred } from './patterns/other/deferred';\r\n","\r\nfunction bootstrap(target) {\r\n    var element = target;\r\n    var selector = this.selector;\r\n    var data = element.dataset || {};\r\n    var ex = /[\\s]+/img;\r\n    var slug = data.behavior || element.v || '';\r\n    var components = slug.split(ex);\r\n    var children = element.children;// element.querySelectorAll(selector);\r\n    (this, document, data, slug, components, children);\r\n    \r\n    var resolveScope = function resolveScope(parent, child) {\r\n        var isDirectDescendant = (child.parentNode === parent);\r\n        if (isDirectDescendant) bootstrap.call(this, child);\r\n    }.bind(this, element);\r\n    \r\n    // components.forEach(this.bootstrap.bind(this, element));\r\n    // Array.prototype.forEach.call(children, resolveScope);\r\n    \r\n    // ... or? ...\r\n    \r\n    Array.prototype.forEach.call(children, resolveScope);  // TODO: Optimize!!!\r\n    if (!!slug) components.forEach(this.bootstrap.bind(this, element));\r\n}\r\n\r\nfunction $bootstrap(root, medium) {\r\n    var scopeSelector = '[data-behavior]'\r\n      , $root = $(root)\r\n      , $parent = $root.find(scopeSelector)\r\n      , hasBehavior = $root.is(scopeSelector)\r\n      ;\r\n    var slug = $root.attr('data-behavior')\r\n      , formattedSlug = slug && slug.replace(/^[,;\\s]+|[,;\\s]+$/g, '').replace(/[,;\\s]+/g, '|').replace(/[|]+$/g, '') || ''\r\n      , moduleIds = $.unique(formattedSlug.split('|')).sort()\r\n      , scopeId = moduleIds.join(' ')\r\n      ;\r\n    var childMedium = medium.$spawn(new function ChildScope() { this.element = root; });\r\n    \r\n\r\n    var resolveBehavior = function resolveBehavior(scope, behavior, i, a) {\r\n        var scope = ($root.is('html')) ? document : scope;\r\n        this.start(behavior, scope, scopeId, childMedium);\r\n    }.bind(this, $root[0]);\r\n\r\n    var resolveChildren = function resolveChildren(i, scope) {\r\n        var $firstScope = $(scope);\r\n        if (!$($firstScope.parent()).is($parent)) {\r\n            autoRegisterModules.call(this, $firstScope, childMedium);\r\n        }\r\n\r\n    }.bind(this);\r\n\r\n    moduleIds.forEach(resolveBehavior);\r\n    $parent.each(resolveChildren);\r\n\r\n}\r\n\r\nclass DefaultDirector {}\r\n\r\nfunction DefaultServicesSandbox(utils) { return utils; }\r\nfunction DefaultComponentSandbox(element) { return element; }\r\n\r\nexport { bootstrap, $bootstrap, DefaultDirector, DefaultServicesSandbox, DefaultComponentSandbox };\r\n","\r\nclass Handler {\r\n    respond(e: CustomEvent): any {\r\n        // e.preventDefault();\r\n        // e.stopPropagation();\r\n        // e.stopImmediatePropagation();\r\n        // return false;\r\n        return e.detail;\r\n    }\r\n}\r\n\r\n/**\r\n * @intention \r\n * @usage \r\n *  * var cor = new ChainOfResponsibility({ ... });  // see config/constructor\r\n *  * cor.push({ respond(e) {...} });\r\n *  * cor.push({ respond(e) { e.stopPropagation(); return false } }, { respond(e) {...} }, ...);\r\n *  * [EventTarget].addEventListener('click', cor.respond.bind(cor), false);  // only 1st 2 handlers get invoked\r\n *  * \r\n    * private nodeHandlers: ChainOfResponsibility = new ChainOfResponsibility({}, [\r\n    *     { respond: (e: CustomEvent) => console.log('COR: A', e) },\r\n          { respond: (e: CustomEvent) => console.log('COR: B', e) },\r\n          // { respond: (e: CustomEvent) => e.stopPropagation() },\r\n          { respond: ({ detail: value }: CustomEvent) => console.log('COR: C', value) },\r\n    * ]);\r\n */\r\nclass ChainOfResponsibility extends Array {\r\n    protected config: any = { cancelable: false, bubbles: true };\r\n        \r\n    constructor(config, responders: Handler[] = []) {\r\n        super();\r\n        var { bubbles, cancelBubble, cancelable, defaultPrevented } = config;\r\n        \r\n        this.config = { ...this.config, ...config };\r\n        this.push(...responders);\r\n        \r\n        return this;\r\n    }\r\n    \r\n    protected execute(e: CustomEvent, i: number = 0, handlers: Handler[] = this.slice()): CustomEvent {\r\n        var handler = handlers[i] || new Handler();\r\n        var result = this.propagate(e, handler, i, handlers);  // process & reassign in case of change\r\n        var event = new CustomEvent(e.type, { detail: result }), next = handlers[i + 1];\r\n        \r\n        if (e.cancelBubble) event.stopPropagation();\r\n        if (e.cancelBubble) return event;  // if cancelled, stop immediately. return with value from cancellor.\r\n        if (next) return this.execute(event, ++i);  // has sibling handler. continue with new detail.\r\n        return event;  // if end reached and event not cancelled\r\n    }\r\n    \r\n    protected propagate(e: CustomEvent|any, handler: Handler, i: number, handlers: Handler[]): any {  // TODO: use Recursion to avoid unnecessary iterations\r\n        if (e.cancelBubble) return e;\r\n        var { config } = this;\r\n        var value = handler.respond.call(handler, e)\r\n          , cancelBubble = !{ 'undefined': true, 'false': false }[ value ]\r\n          ;\r\n        if (config.cancelable && cancelBubble) ( e.stopPropagation(), e.stopImmediatePropagation() );\r\n        // e.eventPhase = i;\r\n        \r\n        return value;\r\n    }\r\n    \r\n    chain(handler: Handler, ...handlers: Handler[]): ChainOfResponsibility {\r\n        this.push(handler, ...handlers);\r\n        return this;\r\n    }\r\n    \r\n    respond(e: CustomEvent<any>): CustomEvent<any> {\r\n        var event = this.execute(e);\r\n        // var result = this.reduce( this.propagate.bind(this), e );\r\n        return event;  // subclasses can implement return result.cancelBubble or return false;\r\n    }\r\n    \r\n}\r\n\r\nexport { ChainOfResponsibility, Handler };\r\n","\r\n/**\r\n * @intention \r\n * @usage \r\n *  * var command = new Command(console, 'log');\r\n *  * command.execute('This gets logged by the console');\r\n */\r\nclass Command {\r\n    private context: any = null;\r\n    private action: string = '';\r\n        \r\n    constructor(context, action) {\r\n        this.context = context;\r\n        this.action = action;\r\n    }\r\n    \r\n    execute(...splat: any[]) {\r\n        var { context, action } = this;\r\n        var value = context[action](...splat);\r\n        return value;\r\n    }\r\n    \r\n}\r\n\r\nclass StrictCommand extends Command {\r\n    \r\n    public execute = (...splat: any[]) => super.execute(...splat);\r\n    \r\n}\r\n\r\nexport { Command, StrictCommand };\r\n","/**\r\n * THIS SHOULD ACTUALLY BE JUST AN EVENT-AGGREGATOR THAT CAN BE USED [PER USUAL] ACROSS\r\n * THE SYSTEM, WHILE A \"WebSocketDecorator\" CAN BE USED TO NORMALIZE THE EXTERNAL LIBRARY.\r\n */\r\nvar EventEmitter = EventTarget;\r\nclass EventHub extends EventEmitter {\r\n    \r\n    publish(channel, data) {\r\n        var e = new CustomEvent(channel, { detail: data });\r\n        this.dispatchEvent(e);\r\n        return this;\r\n    }\r\n    subscribe(channel, handler) {\r\n        this.addEventListener(channel, handler, false);\r\n        return this;\r\n    }\r\n    unsubscribe(channel, handler) {\r\n        this.removeEventListener(channel, handler, false);  // what is 3rd param again?\r\n        return this;\r\n    }\r\n    \r\n}\r\n\r\nexport { EventHub };\r\n","\r\nimport { Utilities, Deferred } from \"@motorman/core/utilities\";\r\nimport { IEventAggregator } from \"@motorman/core/eventaggregator.interface\";\r\nimport { StrictCommand as Command } from \"@motorman/core/utilities/patterns/behavioral\";\r\nimport { ChainOfResponsibility } from \"@motorman/core/utilities/patterns/behavioral\";\r\n\r\ntype ListenerMap = { type: string, name: string, handler: (e: Event, ...splat: any[]) => any };\r\ntype EventEmitter = IEventAggregator&(Comm|Hub);\r\n\r\nvar utils = new (class ElementUtilities extends Utilities {\r\n    \r\n    composeCommand(component: any, name: string) {\r\n        var command = new Command(component, name);\r\n        return command;\r\n    }\r\n    composeExecutor(component: any, name: string) {\r\n        var command = this.composeCommand(component, name), { execute } = command;\r\n        return execute;\r\n    }\r\n    mapExecutor(component: any, item: any) {\r\n        var { name } = item;\r\n        var handler = this.composeExecutor(component, name), details = { ...item, handler };\r\n        return details;\r\n    }\r\n    \r\n})();\r\n\r\nclass Channels {\r\n    ['LEFECYCLE:ELEMENT:CREATED'] = 'vcomm://created/element';\r\n    ['LEFECYCLE:ELEMENT:CONNECTED'] = 'vcomm://connected/element';\r\n    ['ELEMENT:TEMPLATE:FOUND'] = 'vcomm://found/element/template';\r\n    ['ELEMENT:MUTATION:OBSERVED'] = 'vcomm://observed/element/mutation';\r\n    ['PROXY:INVOKED'] = 'vcomm://invoked/proxy';\r\n    ['PROXY:CONSTRUCT:INVOKED'] = 'vcomm://invoked/proxy/construct';\r\n    ['PROXY:HAS:INVOKED'] = 'vcomm://invoked/proxy/has';\r\n    ['PROXY:GET:INVOKED'] = 'vcomm://invoked/proxy/get';\r\n    ['PROXY:SET:INVOKED'] = 'vcomm://invoked/proxy/set';\r\n    ['PROXY:DELETE:INVOKED'] = 'vcomm://invoked/proxy/delete';\r\n    ['PROXY:APPLY:INVOKED'] = 'vcomm://invoked/proxy/apply';\r\n    ['PROXY:MOCK:INVOKED'] = 'vcomm://invoked/proxy/mock';\r\n}\r\nclass Hub implements IEventAggregator {\r\n    private subscriptions: any = { };\r\n    public channels: Channels = new Channels();\r\n\r\n    constructor() {}\r\n    \r\n    private invoke(subscription, data) {\r\n        var { channel, handler, context } = subscription;\r\n        var e = new CustomEvent(channel, { detail: data });\r\n        handler.call(context, e);\r\n        return this;\r\n    }\r\n\r\n    publish(channel: string, data?: any, ...more: any[]) {\r\n        if (!this.subscriptions[channel]) this.subscriptions[channel] = [ ];\r\n        var subscriptions = this.subscriptions[channel];\r\n        for (let i = 0, len = subscriptions.length; i < len; i++) this.invoke(subscriptions[i], data);\r\n        return this;\r\n    }\r\n    subscribe(channel, handler) {\r\n        if (!this.subscriptions[channel]) this.subscriptions[channel] = [ ];\r\n        var subscription = { channel, handler, context: this };\r\n        this.subscriptions[channel].push(subscription);\r\n        return this;\r\n    }\r\n    unsubscribe(channel, handler) {\r\n        if (!this.subscriptions[channel]) this.subscriptions[channel] = [ ];\r\n        // this.target.removeEventListener(channel, handler, false);\r\n        return this;\r\n    }\r\n\r\n}\r\nclass Comm implements IEventAggregator {\r\n    private target = new EventTarget();\r\n    public channels: Channels = new Channels();\r\n\r\n    constructor() {}\r\n\r\n    publish(channel: string, data?: any, ...more: any[]) {\r\n        var e = new CustomEvent(channel, { detail: data });\r\n        this.target.dispatchEvent(e);\r\n        return this;\r\n    }\r\n    subscribe(channel, handler) {\r\n        this.target.addEventListener(channel, handler, false);\r\n        return this;\r\n    }\r\n    unsubscribe(channel, handler) {\r\n        this.target.removeEventListener(channel, handler, false);\r\n        return this;\r\n    }\r\n\r\n}\r\n\r\nclass ConstructorProxy {\r\n    private comm: any;\r\n    private Sandbox: any;\r\n    private element: HTMLElement;\r\n    private director: any;\r\n    public sandbox: any;\r\n\r\n    constructor({ comm, Sandbox, element, director }) {\r\n        this.comm = comm;\r\n        this.Sandbox = Sandbox;\r\n        this.element = element;\r\n        this.director = director;\r\n    }\r\n\r\n    construct(Target, args) {\r\n        var { Sandbox, comm, element, director } = this;\r\n        var sandbox = new Sandbox(element, comm, director);\r\n        var params = [].concat(sandbox, 'extra');\r\n        var data = { type: 'construct', Target, args };\r\n        var result = Reflect.construct(Target, params /*, PrototypeConstructor*/);\r\n        \r\n        this.sandbox = sandbox;\r\n        comm.publish(comm.channels['PROXY:INVOKED'], data);\r\n        comm.publish(comm.channels['PROXY:CONSTRUCT:INVOKED'], data);\r\n        \r\n        return result;\r\n    }\r\n    \r\n}\r\n\r\nclass MemberProxy {\r\n    private comm: any;\r\n    private source: any;\r\n    private element: HTMLElement;\r\n\r\n    constructor({ comm, source, element }) {\r\n        this.comm = comm;\r\n        this.source = source;\r\n        this.element = element;\r\n    }\r\n\r\n    has(target: any, key: any) {\r\n        var { source, comm } = this;\r\n        var data = { type: 'has', source, key };\r\n        var result = Reflect.has(source, key);\r\n        \r\n        comm.publish(comm.channels['PROXY:INVOKED'], data);\r\n        comm.publish(comm.channels['PROXY:HAS:INVOKED'], data);\r\n        \r\n        return result;\r\n    }\r\n\r\n    get(target: any, key: any, receiver: any) {\r\n        // if (target[key].call) return new Proxy( target[key], new MethodProxy({ comm: this.comm, source: this.source, element: this.element }) );\r\n        var { source, comm, element } = this;\r\n        var data = { type: 'get', source, key };\r\n        var result = Reflect.get(source, key);  // omit receiver to get key of source\r\n        \r\n        comm.publish(comm.channels['PROXY:INVOKED'], data);\r\n        comm.publish(comm.channels['PROXY:GET:INVOKED'], data);\r\n        \r\n        return result;\r\n    }\r\n\r\n    set(target: any, key: any, value: any, receiver: any) {\r\n        var { source, comm } = this;\r\n        var data = { type: 'set', source, key, value };\r\n        var result = Reflect.set(source, key, value);\r\n        \r\n        comm.publish(comm.channels['PROXY:INVOKED'], data);\r\n        comm.publish(comm.channels['PROXY:SET:INVOKED'], data);\r\n        \r\n        return result\r\n    }\r\n\r\n    deleteProperty(target: Function, key: any) {\r\n        var { source, comm } = this;\r\n        var data = { type: 'delete', source, key };\r\n        var result = Reflect.deleteProperty(source, key);\r\n        \r\n        comm.publish(comm.channels['PROXY:INVOKED'], data);\r\n        comm.publish(comm.channels['PROXY:DELETE:INVOKED'], data);\r\n        \r\n        return result;\r\n    }\r\n\r\n}\r\n\r\nclass MethodProxy {\r\n    private comm: any;\r\n    private source: any;\r\n    private element: HTMLElement;\r\n\r\n    constructor({ comm, source, element }) {\r\n        this.comm = comm;\r\n        this.source = source;\r\n        this.element = element;\r\n    }\r\n\r\n    apply(target, thus, args) {\r\n        var { source, comm } = this;\r\n        var data = { type: 'apply', source, target, thus, args };\r\n        var result = target.call(source, ...args);\r\n        // var result = source[target.name](...args);\r\n        // var result = target.call(thus, ...args);\r\n        // var result = Reflect.apply(target, thus, args);\r\n        \r\n        comm.publish(comm.channels['PROXY:INVOKED'], data);\r\n        comm.publish(comm.channels['PROXY:APPLY:INVOKED'], data);\r\n        \r\n        return result;\r\n    }\r\n\r\n}\r\n\r\nclass ProxyManager {  // sets up & manages proxy relationships\r\n    \r\n}\r\n\r\nclass Comparitor {\r\n    public previous: any = undefined;\r\n    get name(): string { return this.attr.name; }\r\n    get current(): any { return this.component[ this.name ]; }\r\n    set current(value: any) { this.attr.value = value; }\r\n    get equal(): boolean { return this.detect(); }\r\n    get dirty(): boolean { return !this.equal; }\r\n    \r\n    constructor(private comm: EventEmitter, private component: any, private attr: Attr) {\r\n        var { name, value } = attr;\r\n        this.previous = value;\r\n        return this;\r\n    }\r\n    \r\n    detect() {\r\n        var { comm, name, previous, current } = this;\r\n        var equal = (previous === current);\r\n        var details = { name, previous, current, equal };\r\n        \r\n        if (!equal) comm.publish(comm.channels['ELEMENT:ATTRIBUTE:CHANGE'], details);\r\n        return equal;\r\n    }\r\n    \r\n    update() {\r\n        var { name, component } = this;\r\n        this.previous = this.current = component[name];\r\n        return this;\r\n    }\r\n    \r\n}\r\n\r\nclass TemplateVariable {  // TODO: this could probably just have attr passed in while using getters for everything\r\n    name: string = '';\r\n    attr: Attr = null;\r\n    element: HTMLElement = null;\r\n    \r\n    constructor(options: any = {}) {\r\n        var { name, attr, element } = options;\r\n        \r\n        this.name = name || this.name;\r\n        this.attr = attr || this.attr;\r\n        this.element = element || this.element;\r\n        \r\n        return this;\r\n    }\r\n    \r\n}\r\nclass TemplateListener extends TemplateVariable {\r\n    type: string = '';\r\n    handler: (e: Event) => any;\r\n    \r\n    constructor(options: any = {}) {\r\n        super(options);\r\n        var { type, handler } = options;\r\n        \r\n        this.type = type || this.type;\r\n        this.handler = handler || this.handler;\r\n        \r\n        return this;\r\n    }\r\n    \r\n}\r\nclass TemplateManagementOptions {\r\n    // reReference: RegExp = /^#(.+)$/;\r\n    reAttrIn: RegExp = /\\[(\\w*)\\]/;\r\n    reStructural: RegExp = /^\\*(\\w*)$/;\r\n    reListener: RegExp = /\\((\\w*)\\)/;\r\n    reListenerValue: RegExp = /(\\w*)\\((.*)\\)/;\r\n    // reInterpolable: RegExp = /{{([^{}]*)}}/g;\r\n}\r\nclass AttributeManager {\r\n    get name() { return this.attr.name; }\r\n    get value() { return this.attr.value; }\r\n    get element() { return this.attr.ownerElement; }\r\n    \r\n    constructor(protected attr: Attr) {\r\n        var { name, value, ownerElement: element } = attr;\r\n        attr.addEventListener('attributechange', this.handleChange, true);\r\n        attr.addEventListener('mutation', (e) => console.log('MUTATION IS A NATIVE EVENT!'), true);\r\n        attr.addEventListener('attributechange', (e) => console.log('MUTATION EVENT!'), true);\r\n        return this;\r\n    }\r\n    \r\n    destroy() {\r\n        var { attr } = this;\r\n        attr.removeEventListener('change', this.handleChange, false);\r\n        return this;\r\n    }\r\n    \r\n    private handleChange = (e: CustomEvent) => {\r\n        var { name, value, element, attr } = this;\r\n        var detail = { name, value, element, attr }, event = new CustomEvent('attributechange', { detail });\r\n        console.log('@AttrManager # handleChange', e, this);\r\n        element.dispatchEvent(event);\r\n        \r\n    };\r\n    \r\n}\r\n\r\nclass MutationManager {\r\n    protected observer: MutationObserver = new MutationObserver( (r, o) => this.observe(r, o) );\r\n    protected element: Element;\r\n    \r\n    constructor(protected comm: EventEmitter, protected component: any) {}\r\n    \r\n    private observe(changes: MutationRecord[], observer: MutationObserver) {\r\n        for(let mutation of changes) this[mutation.type](mutation);\r\n    }\r\n    \r\n    private ['childList'](mutation: MutationRecord) {\r\n        var { element, component, comm } = this;\r\n        console.log('A child node has been added or removed.');\r\n        comm.publish(comm.channels[''], { mutation, element });\r\n    }\r\n    private ['attributes'](mutation: MutationRecord) {\r\n        var { component, comm } = this;\r\n        var { attributeName: name, target: element } = mutation;\r\n        var attr = (element as Element).getAttributeNode(name);\r\n        var detail = mutation, e = new CustomEvent('attributechange', { detail }), a = new CustomEvent('mutation', { detail });\r\n        \r\n        comm.publish(comm.channels['ELEMENT:MUTATION:OBSERVED'], mutation);\r\n        element.dispatchEvent(e);\r\n        attr.dispatchEvent(a);\r\n    }\r\n    private ['subtree'](mutation: MutationRecord) {\r\n        var { element, component, comm } = this;\r\n    }\r\n    \r\n    connect(element: Element, config?: any) {\r\n        var { observer } = this;\r\n        var config = { attributes: true, childList: true, subtree: true, ...config };\r\n        \r\n        this.element = element;\r\n        observer.observe(element, config);\r\n        \r\n        return this;\r\n    }\r\n    \r\n    destroy() {\r\n        this.observer.disconnect();\r\n        // destroy all attribute listeners as well\r\n    }\r\n    \r\n}\r\nclass ContentManager {\r\n    protected dTemplateReady: Deferred<boolean> = new Deferred();\r\n    protected $variables: Map<string, Element> = new Map();\r\n    protected attributes: AttributeManager[] = [ ];\r\n    protected templateListeners: TemplateListener[] = [];\r\n    protected mutations: MutationManager = new MutationManager(this.comm, this.component);\r\n    public fragment: DocumentFragment|Element = new DocumentFragment();\r\n    public template: string = '';\r\n    public content: string = '';\r\n    get component() { return this.element.component; }\r\n    get comm() { return this.element.comm; }\r\n    get $elementRefs() { return this.element.$elementRefs; }\r\n    get elementRefs() { return this.element.elementRefs; }\r\n    get $attrRefs() { return this.element.$attrRefs; }\r\n    get attrRefs() { return this.element.attrRefs; }\r\n    get listeners() { return this.element.listeners; }\r\n    get reAttrIn() { return this.options.reAttrIn; }\r\n    get reStructural() { return this.options.reStructural; }\r\n    get reListener() { return this.options.reListener; }\r\n    get reListenerValue() { return this.options.reListenerValue; }\r\n    protected pipeNodeHandler = (handler: Function) => (e: CustomEvent) => handler.call(this, e.detail, e);\r\n    protected nodeProcessors: ChainOfResponsibility = new ChainOfResponsibility({}, [\r\n        { respond: this.pipeNodeHandler(this.processAttributeNodeRepeat) },  // note Execution Guards in method\r\n        { respond: this.pipeNodeHandler(this.processElementNode) },\r\n        { respond: this.pipeNodeHandler(this.processTextNode) },\r\n        { respond: this.pipeNodeHandler(this.processCommentNode) },\r\n        { respond: this.pipeNodeHandler(this.processAttributeNodeRepeat) },\r\n    ]);\r\n    protected pipeAttributeHandler = (handler: Function) => (e: CustomEvent) => handler.call(this, e.detail, e);\r\n    protected attributeProcessors: ChainOfResponsibility = new ChainOfResponsibility({}, [\r\n        { respond: this.pipeAttributeHandler(this.handlePropertyBinding) },\r\n        { respond: this.pipeAttributeHandler(this.handleListenerBinding) },\r\n    ]);\r\n    \r\n    constructor(private element: HTMLElement&any, private options: TemplateManagementOptions) {}\r\n    \r\n    parseNode(node: Node): Node {\r\n        var { nodeProcessors: cor } = this;\r\n        var e = new CustomEvent('domnodeprocess', { detail: <any>node })\r\n          , e = cor.respond(e)\r\n          , { detail: result } = e\r\n          ;\r\n        var { isConnected, parentNode: parent, previousSibling: previous, nextSibling: next, firstChild: child } = result;\r\n        \r\n        // RECURSION\r\n        if (result !== node) return this.parseNode(result);  // reparse. assume replacement occurred. do not continue for next or child.\r\n        if (child) this.parseNode(child);  // TCO???\r\n        if (next) this.parseNode(next);  // TCO???\r\n        this.dTemplateReady.resolve(true);  // gets fulfilled after last element processed. noop after that.\r\n        \r\n        return node;  // result can still equal node\r\n    }\r\n    \r\n    private processAttributeNodeRepeat(node: Node&Element, response: CustomEvent): Node&Element {\r\n        if (!{ '1': true }[ node.nodeType ]) return node;  // https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType\r\n        \r\n        if ( !node.hasAttribute('*each') ) return node;\r\n        else response.stopPropagation();  // discontinue processing. abort/break chain. do not pass into next process\r\n        \r\n        var attribute: Attr = node.getAttributeNode('*each')\r\n          , replacement: Node&Element = this.handleStructuralRepeat(attribute)\r\n          ;\r\n        return replacement;\r\n    }\r\n    private handleStructuralRepeat(attr: Attr) {\r\n        var { reStructural, component } = this;\r\n        var { name, value, ownerElement: instructor } = <any>attr;\r\n        var { previousSibling: previous } = instructor;\r\n        var matches = reStructural.exec(name), [ match, type ] = matches;\r\n        var [ namespace, property ] = value.split(' of ');\r\n        var items = component[property] || [ { id: 3 }, { id: 2 }, { id: 1 } ];\r\n        var ignore = instructor.removeAttribute(match);  // avoid infinite loop\r\n        var clones = items.map( (item) => utils.interpolate(instructor.outerHTML)({ ...component, [namespace]: item }) )  // not working because utils.interpolate doesn't account for namespaces (x.y.z)\r\n          , elements = clones.join('\\n')\r\n          ;\r\n        instructor.outerHTML = elements;  // replace current element with clones. create real Nodes in DOM Tree & [Heap] memory.\r\n        \r\n        return previous.nextSibling;  // that node which now exists at instructor's index due to replacement\r\n    }\r\n    \r\n    private processElementNode(node: Node&Element): Node&Element {  // Node.ELEMENT_NODE === 1\r\n        if (!{ '1': true }[ node.nodeType ]) return node;  // https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType\r\n        var attributes: NamedNodeMap = node.attributes, attrs = Array.prototype.slice.call(attributes), attr = attrs.shift();\r\n        var result = this.processAttributeNode(attr, ...attrs);\r\n        \r\n        return node;\r\n    }\r\n    private processAttributeNode(node: Node&Attr, ...more: (Node&Attr)[]): Node&Attr {  // Node.ATTRIBUTE_NODE === 2\r\n        if (!node) return node;\r\n        if (!{ '2': true }[ node.nodeType ]) return node;  // https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType\r\n        var { name, value, ownerElement: owner } = node;\r\n        var { attributeProcessors: cor } = this;\r\n        var e = new CustomEvent('domnodeattributeprocess', { detail: <any>node })\r\n          , e = cor.respond(e)\r\n          , { detail: result } = e\r\n          ;\r\n        var next: Node&Attr = more.shift();\r\n        \r\n        if (next) this.processAttributeNode(next, ...more);  // TCO???\r\n        return node;\r\n    }\r\n    private handlePropertyBinding(node: Node&Attr): Node&Attr {\r\n        if (!{ '2': true }[ node.nodeType ]) return node;  // https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType\r\n        if ( !this.reAttrIn.test(node.name) ) return node;\r\n        var { reAttrIn, component } = this;\r\n        var { name, value, ownerElement: owner } = node;\r\n        var matches = reAttrIn.exec(name), [ match, property ] = matches;\r\n        var { [value]: datum } = component;\r\n        \r\n        // console.log('ATTR (IN) %O', node, property, node.value, datum);\r\n        // ownerElement.setAttribute(property, datum);\r\n        owner[property] = datum;\r\n        \r\n        return node;\r\n    }\r\n    private handleListenerBinding(node: Node&Attr): Node&Attr {\r\n        if (!{ '2': true }[ node.nodeType ]) return node;  // https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType\r\n        if ( !this.reListener.test(node.name) ) return node;\r\n        var { templateListeners, reListener } = this;\r\n        var { name, ownerElement: element } = node, matches = reListener.exec(name), [ match, type ] = matches;\r\n        var handler = this.createBindingInvoker(node);\r\n        var details = new TemplateListener({ name, type, node, element, handler });\r\n        // console.log('LISTENER %O', node);\r\n        \r\n        templateListeners.push(details);\r\n        return node;\r\n    }\r\n    private createBindingInvoker(attr: Attr): Function {\r\n        var { component, reListenerValue } = this;\r\n        var { name, value } = attr;\r\n        var [ match, method, args ] = value.match(reListenerValue);\r\n        var exe = utils.composeExecutor(component, method);\r\n        var op = `with($_) return eval(\"h(${args})\");`;\r\n        var fn = new Function('$_', 'h', '$event', op);\r\n        var f = (e) => fn(component, exe, e);\r\n        \r\n        return f;\r\n    }\r\n    \r\n    private processTextNode(node: Node&Text): Node&Text {  // Node.TEXT_NODE === 3\r\n        if (!{ '3': true }[ node.nodeType ]) return node;  // https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType\r\n        // var { component} = this;\r\n        // var { data } = node;\r\n        // var interpolated = utils.interpolate(data)(component);\r\n        \r\n        // console.log('TEXT %O', node);\r\n        // // node.replaceWith(interpolated);\r\n        // // console.log('TEXT %O', node, data, interpolated);\r\n        \r\n        return node;\r\n    }\r\n    \r\n    private processCommentNode(node: Node&Comment): Node&Comment {  // Node.COMMENT_NODE === 8\r\n        if (!{ '8': true }[ node.nodeType ]) return node;  // https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType\r\n        // var attrs: NamedNodeMap = node.attributes;\r\n        \r\n        // console.log('COMMENT %O', node);\r\n        // for (let i = 0, len = attrs.length; i < len; i++) this.parseChildAttr(attrs[i], i, attrs);\r\n        // this.parse(node.childNodes);\r\n        \r\n        return node;\r\n    }\r\n    \r\n    /**\r\n     * @intention : Leverage <template> &| DocumentFragment so that DOM objects do not change between parsing template variables & processing event-bindings.\r\n     */\r\n    refresh(template: string = '') {\r\n        var { component, element, dTemplateReady } = this;\r\n        var { promise: pTemplateReady } = dTemplateReady;\r\n        var temp = document.createElement('template');\r\n        var innerHTML = utils.interpolate(template)(component);\r\n        \r\n        // temp.innerHTML = innerHTML;\r\n        // console.log('TEMPLATE %O', temp.content.childNodes);\r\n        \r\n        element.innerHTML = innerHTML;\r\n        this.template = template;\r\n        pTemplateReady\r\n            .then( () => this.bindMutationObservers() )\r\n            .then( () => this.bindElementNodeRefs() )\r\n            .then( () => this.bindAttributeNodeRefs() )\r\n            .then( () => this.bindListeners() )\r\n            .then( () => this.dTemplateReady = new Deferred() )\r\n            // .then( () => this.comm.publish(READY) )\r\n            ;\r\n        this.destroy()\r\n            .parseNode(element.firstChild)\r\n            ;\r\n        return this;\r\n    }\r\n    \r\n    appendTo(element: Element) {\r\n        // var { content } = this;\r\n        // this.element = element;\r\n        // this.element.innerHTML = content;\r\n        \r\n        return this;\r\n    }\r\n    \r\n    bind() {  // convert all of this to Promises using new Deferred() at this.processNode Tail-Call.\r\n        this.bindMutationObservers()\r\n            .bindListeners()\r\n            .dTemplateReady = new Deferred()\r\n            ;\r\n        return this;\r\n    }\r\n    bindMutationObservers() {\r\n        var { element, mutations } = this;\r\n        mutations.connect(element);\r\n        return this;\r\n    }\r\n    bindElementNodeRefs() {\r\n        var { element, component, elementRefs } = this;\r\n        // element.matches(selector);\r\n        for (let { isHost, selector, key } of elementRefs) if (!{ 'function': true }[ typeof component[key] ]) isHost ? component[key] = element : component[key] = element.querySelector(selector);\r\n        return this;\r\n    }\r\n    bindAttributeNodeRefs() {\r\n        var { element, component, attrRefs } = this;\r\n        // console.log('>>>>>>>', attrRefs);\r\n        for (let { isHost, selector, key, name } of attrRefs) if (!{ 'function': true }[ typeof component[key] ]) isHost ? component[key] = element.getAttributeNode(name) : component[key] = element.querySelector(selector).getAttributeNode(name);\r\n        return this;\r\n    }\r\n    bindListeners() {\r\n        var { element, listeners, templateListeners, $elementRefs } = this;\r\n        listeners.forEach( ({ key, type, handler }) => this.addNodeListener(key, type, handler ) );\r\n        templateListeners.forEach( ({ element: target, type, handler }) => target.addEventListener(type, handler, false) );\r\n        return this;\r\n    }\r\n    addNodeListener(key: string, type: string, handler: Function) {\r\n        var { element, $elementRefs, $attrRefs } = this;\r\n        var metadata = $elementRefs.get(key) || $attrRefs.get(key) || { };\r\n        var { decorator, selector, isHost, name } = metadata;\r\n        var target = {\r\n            'true': element,\r\n            'false': element['querySelector'](selector),\r\n        }[ isHost ];\r\n        var node = {\r\n            'reference:element': target,\r\n            'reference:attribute': target['getAttributeNode'](name),\r\n        }[ decorator ];\r\n        \r\n        if ( !$elementRefs.get(key) && !$attrRefs.get(key) ) return this;\r\n        if (  $elementRefs.get(key) &&  $attrRefs.get(key) ) return this;\r\n        \r\n        node.addEventListener(type, handler, false);\r\n        \r\n    }\r\n    \r\n    destroy() {\r\n        var { listeners, templateListeners } = this;\r\n        \r\n        templateListeners.forEach( ({ element, type, handler }) => element.removeEventListener(type, handler, false) );\r\n        templateListeners.length = 0;\r\n        \r\n        return this;\r\n    }\r\n    \r\n}\r\n\r\n\r\nclass ElementEngine {\r\n    \r\n    constructor(private Sandbox: any, private director: any) {}\r\n    \r\n    private getConfig(Class, element) {  // TODO: fractionate routine\r\n        var { director, Sandbox } = this;\r\n        var { metadata } = Class;\r\n        var { $members, $observedAttributes, $watchers, $elements: $elementRefs, $attrs: $attrRefs, $listeners, $subscriptions } = metadata;\r\n        \r\n        var comm = new Comm();\r\n        var construction = new ConstructorProxy({ comm, Sandbox, element, director }); \r\n        var ClassProxy = new Proxy(Class, construction);\r\n        var component = new ClassProxy({ state: false });\r\n        var membersProxy = new MemberProxy({ comm, source: component, element });\r\n        var methodsProxy = new MethodProxy({ comm, source: component, element });\r\n        var proxy = new Proxy(component, membersProxy);\r\n        var properties = Object.getOwnPropertyNames(Class.prototype);\r\n        var methodBlacklist = { 'constructor': true, 'connectedCallback': true, 'attributeChangedCallback': true, 'disconnectedCallback': true, 'adoptedCallback': true };\r\n        \r\n        var members = Array.from( $members.values() )\r\n          , watchers = Array.from( $watchers.values() )\r\n          , elementRefs = Array.from( $elementRefs.values() )\r\n          , attrRefs = Array.from( $attrRefs.values() )\r\n          , listeners = Array.from( $listeners.values() ).map( (item) => utils.mapExecutor(component, item) )  // map each handler to a handler bound to \"component\"\r\n          , subscriptions = Array.from( $subscriptions.values() ).map( (item) => utils.mapExecutor(component, item) )  // map each handler to a handler bound to \"component\"\r\n          ;\r\n        \r\n        var surrogate = Object.create(proxy);  // use Object.create to carry over get|set; spread op fails to do so\r\n        for (let key in proxy) if (proxy[key] && proxy[key].call) surrogate[key] = new Proxy(proxy[key], methodsProxy);\r\n        properties.forEach( (key) => { if (!!component[key] && component[key].call && !methodBlacklist[key]) surrogate[key] = new Proxy(component[key], methodsProxy); });\r\n        \r\n        var config = {  // TODO: create fn\r\n            comm,\r\n            director,\r\n            Sandbox,\r\n            Class,\r\n            ...{\r\n                sandbox: construction.sandbox,\r\n            },\r\n            ...{\r\n                $members, members,\r\n            },\r\n            ...{\r\n                $watchers, watchers,\r\n            },\r\n            ...{\r\n                $elementRefs, elementRefs,\r\n                $attrRefs, attrRefs,\r\n            },\r\n            ...{\r\n                $listeners, listeners,\r\n                $subscriptions, subscriptions,\r\n            },\r\n            ...{\r\n                component,\r\n                surrogate,\r\n            },\r\n        };\r\n        \r\n        return config;\r\n    }\r\n    \r\n    private prepare(Class) {\r\n        var thus = this;\r\n        var { metadata } = Class;\r\n        var { $observedAttributes } = metadata;\r\n        var observedAttributes = Array.from( $observedAttributes.values() ).map( ({ name }) => name )\r\n        var templateOptions = new TemplateManagementOptions();\r\n        // alert('needs element-selector-binding responsibility-handler in ContentManager');\r\n        \r\n        return class Element extends HTMLElement {  // https://alligator.io/web-components/attributes-properties/\r\n            static get observedAttributes(): string[] { return observedAttributes }  // native HTML Custom Elements\r\n            protected $utils: Utilities = new Utilities();\r\n            private config: any = thus.getConfig(Class, this);\r\n            private comm: EventEmitter = this.config.comm;\r\n            private $: any = this.config.sandbox;\r\n            private component: any = this.config.component;\r\n            private surrogate: any = this.config.surrogate;\r\n            //\r\n            private $observedAttributes: Map<string, any> = this.config.$observedAttributes;\r\n            private observedAttributes: any[] = this.config.observedAttributes;\r\n            private $watchers: Map<string, any> = this.config.$watchers;\r\n            private watchers: any[] = this.config.watchers;\r\n            private $elementRefs: Map<string, any> = this.config.$elementRefs;\r\n            private elementRefs: any[] = this.config.elementRefs;\r\n            private $attrRefs: Map<string, any> = this.config.$attrRefs;\r\n            private attrRefs: any[] = this.config.attrRefs;\r\n            private $listeners: Map<string, any> = this.config.$listeners;\r\n            private listeners: ListenerMap[] = this.config.listeners;\r\n            private $subscriptions: Map<string, any> = this.config.$subscriptions;\r\n            private subscriptions: any[] = this.config.subscriptions;\r\n            //\r\n            private $content: ContentManager = new ContentManager(this, templateOptions);\r\n            private template: string = '';  // this.config.template;\r\n            // private pTemplate: Promise<string> = this.config.pTemplate;\r\n            private $comparitors: Map<string, Comparitor> = new Map();\r\n            private handlers: any[] = [ ];\r\n            get comparitors(): Comparitor[] { return Array.from( this.$comparitors.values() ); }\r\n            // get content(): string { return this.$utils.interpolate(this.template)(this.component); }\r\n            // set content(value: string) { this.innerHTML = value; }\r\n            get attrs() { return observedAttributes; }\r\n            get channels() { return this.comm.channels; }\r\n            // get $elements() { return this.$content.$elements; }\r\n            \r\n            constructor() {\r\n                super();\r\n                var { comm } = this;\r\n                \r\n                this.bind();\r\n                comm.subscribe(comm.channels['ELEMENT:MUTATION:OBSERVED'], (e) => console.log('@MUTATION', e) );\r\n                comm.subscribe(comm.channels['ELEMENT:TEMPLATE:FOUND'], this.handleTemplate );\r\n                comm.subscribe(comm.channels['PROXY:INVOKED'], this.handleProxyInvokation);\r\n                comm.subscribe(comm.channels['PROXY:MOCK:INVOKED'], this.handleProxyInvokation);\r\n                comm.publish(comm.channels['LEFECYCLE:ELEMENT:CREATED']);\r\n                \r\n                return this;\r\n            }\r\n            \r\n            private bind() {\r\n                var { comm, component, subscriptions } = this;\r\n                var { observedAttributes: attributes } = Element;\r\n                \r\n                attributes.forEach( (key) => this.bindAttribute(key) );\r\n                subscriptions.forEach( ({ type, handler }) => comm.subscribe(comm.channels[type], handler) );\r\n                \r\n                return this;\r\n            }\r\n            private bindAttribute(key: string) {  // KEEP?!!!\r\n                var { component } = this;\r\n                var descriptor = Object.getOwnPropertyDescriptor(Class.prototype, key)\r\n                  , descriptor = { ...descriptor }\r\n                  , { get, set } = descriptor\r\n                  ;\r\n                var value = this.getAttribute(key);\r\n                if (!value) this.setAttribute(key, component[key]);\r\n                if (descriptor.get && descriptor.set) descriptor = { get, set };\r\n                else if (!descriptor.get && !descriptor.set) descriptor = { get: () => this.getAttribute(key), set: (v) => this.setAttribute(key, v) };\r\n                else if (!descriptor.get && descriptor.set) descriptor = { get: () => this.getAttribute(key), set };\r\n                else if (descriptor.get && !descriptor.set) descriptor = { get, set: () => this.setAttribute(key, component[key]) };\r\n                Object.defineProperty(component, key, descriptor);\r\n                \r\n                return this;\r\n            }\r\n            \r\n            // https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#Using_the_lifecycle_callbacks\r\n            connectedCallback() {\r\n                var { comm, component } = this;\r\n                // if (component.attachedCallback) component.connectedCallback();\r\n                // this.$load();\r\n                comm.publish(comm.channels['LEFECYCLE:ELEMENT:CONNECTED']);\r\n            }\r\n            attributeChangedCallback(attrName: string, oldVal: string, newVal: string) {\r\n                var { component, $watchers } = this;\r\n                // // var action = `[${attrName}]`, handler = component[action];\r\n                // // var any = `[*]`, all = component[any];\r\n                var $watcher = $watchers.get(attrName);\r\n                \r\n                // // if (component.attributeChangedCallback) component.attributeChangedCallback(attrName, oldVal, newVal);\r\n                // // if (all) all.call(component, attrName, oldVal, newVal);\r\n                // // if (handler) handler.call(component, newVal, oldVal);\r\n                if ($watcher) $watcher.handler.call(component, newVal, oldVal);\r\n                console.log('-------------', newVal, oldVal);\r\n                // // this.$load();\r\n            }\r\n            disconnectedCallback() {\r\n                var { component, listeners, subscriptions } = this;\r\n                if (component.detachedCallback) component.disconnectedCallback();\r\n                // listeners.forEach( (map) => this.unbindListener(component, map) );\r\n                // subscriptions.forEach( (map) => this.unbindMessageHandler(component, map) );\r\n                // this.$unload();\r\n            }\r\n            adoptedCallback() {\r\n                var { component } = this;\r\n                // if (component.adoptedCallback) component.adoptedCallback();\r\n                // this.$load();\r\n                console.log('--adoptedCallback--');\r\n            }\r\n            \r\n            cycle() {\r\n                var { template } = this;\r\n                setTimeout( () => this.$content.refresh(template), 0 );  // let current callStack clear while element may still be mounting\r\n            }\r\n            \r\n            private handleTemplate = (e: CustomEvent) => {\r\n                var { type, detail: template } = e;\r\n                this.template = template;\r\n                this.cycle();\r\n                // console.log('\\n\\n', 'WORKING ON TEMPLATE-HANDLING', '\\n', template, '\\n\\n');\r\n            };\r\n            \r\n            private handleProxyInvokation = (e: CustomEvent) => {  // KEEP?\r\n                // var { component, attributes, content } = this;\r\n                // var { type, detail } = e, { type: method } = detail;\r\n                // var dirty = this.getDirtyAttributeStates(this.comparitors);\r\n                \r\n                // dirty.forEach( ({ name }) => this.initAttribute(component, attributes[name]) );\r\n                // this.$load();\r\n            };\r\n            \r\n        };\r\n    }\r\n    \r\n    define(name, Class, options?: any) {\r\n        if ( !!customElements.get(name) ) return this;\r\n        var Element = this.prepare(Class);\r\n        window.customElements.define(name, Element, options);\r\n        \r\n        return this;\r\n    }\r\n    \r\n}\r\n\r\nexport { ElementEngine };\r\n\r\n/* ================================================================================================================================\r\nTODO\r\n\r\nRefactor\r\nDo less; simplify. Use EDA for more. Lifecycle Hooks should be CustomEvents from Comm.\r\n - ProxyManager: Create \"ProxyManager\" class -- passing in comm -- to manage Proxy operations & triggers.\r\n - AttributeValueProxy: R&D; see if a Proxy Trap can be set on attributes so that Events can be setup on `set()` for `.value`.\r\n    - @watch: @watch Decorator should STILL be used ONLY for Host's observedAttributes -- BUT it should drive a subscription to an event\r\n              published from attributeChangedCallback, which can be on the same or similar channel as other AttrValProxy events.\r\n    - MutationObserver: R&D https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\r\n - Lifecycle Hooks: Lifecycle Hooks should be driven through Comm.\r\n    - TODO: Define Lifecycle Flow.\r\n - @message: @message Decorator should be used for subscribing to Comm; leave assumption about Sandbox alone!\r\n    - Operators: This will obviate the complexity around operators/operands etc! :-D\r\n - Comm: Comm should remain as disperate EventTarget as to not conflate DOM events with Object-to-Object tether.\r\n - Templates: Templates should have their own Channel while `component` is responsible for BOTH getting AND `.publish`ing a template. This\r\n              way, components have control over lazyLoading and swapping out the template on the fly.\r\n    - Templates should be loaded into a detached element, such as a DOMFragment, before interations to discover template refs, \r\n      bindings, and other variables.\r\n    - TemplateRefs should be accessed through the element's $children Map.\r\n - Event Listeners: If there is a way to bind event-handlers before appending Content to DOM, after interpolation, this would be helpful.\r\n - Comm & Channels: Comm should be phased out using an @Decorator for subscriptions while providing access to Comm AND comm Channels ONLY\r\n                    through methods (get|set for channels) on element.\r\n - Slots: Need <slot>s\r\n \r\n - EDA\r\n    - Events can be published for TemplateRef variables while letting Developer decide what to do with them & their .ownerElement.\r\n    \r\n - LEFECYCLE EVENTS & CHANNELS\r\n    - ELEMENT:TEMPLATE:FOUND (watch out for Race Conditions)\r\n    - ELEMENT:CREATED (constructor)\r\n    - ELEMENT:TEMPLATE:CHECKED (DOM Fragment evaluation)\r\n        // -? ELEMENT:TEMPLATE:VARIABLE:FOUND (DOM Fragment evaluation, TemplateRef)\r\n        // -? ELEMENT:TEMPLATE:VARIABLES:FOUND (DOM Fragment evaluation, TemplateRef)\r\n    - ELEMENT:CONTENT:CREATED (interpolated)\r\n    - ELEMENT:CONTENT:CHECKED (injected/appended)\r\n        // -? ELEMENT:TEMPLATE:LISTENER:BOUND (DOM Fragment evaluation, event-handler bound)\r\n        // -? ELEMENT:TEMPLATE:LISTENERS:BOUND (DOM Fragment evaluation, event-handlers bound)\r\n        // -? ELEMENT:TEMPLATE:ATTRIBUTE:BOUND (DOM Fragment evaluation, AttrValTrap & Listener bound)\r\n        // -? ELEMENT:TEMPLATE:ATTRIBUTES:BOUND (DOM Fragment evaluation, AttrValTraps & Listeners bound)\r\n    - ELEMENT:CONTENT:READY (checked + bound)\r\n    - ELEMENT:READY (everything in its right place)\r\n      [ADDITIONAL] ... which part of the sequence do these fall in?\r\n    - ELEMENT:CONNECTED (LIFECYCLE METHOD)\r\n    - ELEMENT:DISCONNECTED (LIFECYCLE METHOD)\r\n    - ELEMENT:ADOPTED (LIFECYCLE METHOD)\r\n    - ELEMENT:ATTRIBUTE:CHANGED (LIFECYCLE METHOD, could be same channel as AttrValTraps, but could also or instead be ELEMENT:OBSERBED-ATTRIBUTE:CHANGED)\r\n\r\n\r\nREFACTOR 2\r\n\r\n\r\nSyntax\r\n\r\nTemplate (<input {{attr}}=\"{{variable}}\"  />)\r\nEvent: Uses (click)=\"handle($event, variable, 'literal')\"\r\nAttribute: type=\"text\", type=\"{{var}}\", {{var}}=\"literal\", {{attr}}=\"{{var}}\"\r\nProperty I (ctrl -> el): [value]=\"var\" (update element)\r\n// Property O (el -> ctrl): {value}=\"var\" (update controller)\r\nTextNode: {{interpolation}}\r\n\r\n\r\nBehavior\r\n\r\nTemplate: Template gets inserted into element and immediately crawled.\r\nParsing: Parsing crawls element.childNodes to include TextNodes, crawls child.attributes, and recurses from child.childNodes.\r\nAttributes: Each attribute is tested for its binding type, handled accordingly, and evaluated using an \"evaluator\".\r\nTextNodes: TextNodes always get interpolated using an \"evaluator\".\r\nChildNodes: ChildNodes are parsed using strategy above.\r\nEvaluator: Evaluator\r\n\r\n\r\nChange Detection\r\n\r\n\r\n\r\n\r\nDecorators\r\n\r\nClass decorators should always contain a \"meta\" property (on their descriptor, Class, or [root] Prototype) with a \"members\" object.\r\nMember decorators always assign metadata to a \"meta\" object on their Class under members[key] providing data for their purpose.\r\nDecorators should have the capability to be leveraged compositively with each other, adding \"meta\" data to the descriptor.\r\n\r\n@observe('prop') x: any;  // prepares metadata for observedAttributes (of \"prop\" with alias \"x\")\r\n@observer('prop') handleChange(...?) {}  // prepares metadata for handler called from attributedChangedCallback\r\n@element('tagName.class[attr]') element: HTMLElement;  // prepares metadata to select & bind an element to component['element'] (if not arguments.length then return HostElement or FirstChild or querySelector('*') or descriptor.name)\r\n@attr('tagName.class[attr]') attr: Attr;  // prepares metadata to select & bind an element's attribute-node to component['attr'] (if not \"[attr]\" then return descriptor.name)\r\n@listener('click') handleClick() {}  // prepares metadata to handle \"click\" on HostElement\r\n@dispatcher('some-type') unique: EventTarget<CustomElement, 'some-type'>; this.unique.dispatchEvent(detail);\r\n----\r\n@listener('click') @element('tagName.class[attr]') handleClick({ target }) {}  // prepares metadata to handle \"click\" on metadata.selector of type \"element\"\r\n@listener('change') @attr('tagName.class[attr]') handleChange({ ownerElement }) {}  // prepares metadata to handle \"change\" on metadata.selector of type \"attr\"\r\n\r\n\r\nMISC\r\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\r\n\r\n\r\n\r\nRESOURCES\r\nMutationObserver (AttrValProxy): https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\r\nDocumentFragment (Preparations): https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment\r\nShodowDOM: https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM\r\n================================================================================================================================ */\r\n","\r\nimport { Utilities, Deferred } from '@motorman/core/utilities';\r\nimport { bootstrap, $bootstrap, DefaultDirector, DefaultComponentSandbox, DefaultServicesSandbox } from './defaults';\r\nimport { ElementEngine } from './element-engine';\r\n\r\nvar director = new DefaultDirector();\r\nvar DEFAULT_CONFIG = {  // ... defaults\r\n    director,\r\n    selector: '[data-v]' || '[data-behavior]',\r\n    datasets: '[v-attribute]',  // includes <script type=\"application/json\"> { items: [...] } </scrpt>\r\n    bootstrap: bootstrap,\r\n    decorators: { services: DefaultServicesSandbox, components: DefaultComponentSandbox, },\r\n};\r\n\r\nclass Core {\r\n    private dConfiguration: Deferred<any> = new Deferred();\r\n    private pConfiguration: Promise<any> = this.dConfiguration.promise;\r\n    private dInitialization: Deferred<any> = new Deferred();\r\n    private pInitialization: Promise<any> = this.dInitialization.promise;\r\n    private utils: Utilities = new Utilities();\r\n    private engine: ElementEngine = new ElementEngine(DefaultComponentSandbox, director);\r\n    private services: any = { };\r\n    private components: any = { };\r\n    private elements: any = { };\r\n    private configuration: any = DEFAULT_CONFIG;\r\n    \r\n    constructor() {\r\n        var { pInitialization, elements } = this;\r\n        \r\n        pInitialization\r\n            .then( (options) => console.log('INIT', options) )\r\n            ;\r\n        this.pConfiguration\r\n            .then( (config) => this.dInitialization.resolve({ target: document }) )\r\n            ;\r\n        return this;\r\n    }\r\n    \r\n    init(options) {\r\n        if (!options) throw Error(\"Vertices Core initialized without options\");\r\n        this.arm(options);\r\n        // this.registerComponent = this.utils.noop;\r\n        // this.registerService = this.utils.noop;\r\n        // this.dInitialization.resolve(options);\r\n        \r\n        return this;\r\n    }\r\n    \r\n    configure(config) {\r\n        this.utils.extend(this.configuration, config);\r\n        this.engine = new ElementEngine(this.configuration.decorators.components, this.configuration.director);\r\n        this.dConfiguration.resolve(this.configuration);\r\n        return this.utils.extend({ }, this.configuration);\r\n    }\r\n    registerService(Service) {\r\n        var id = Service.constructor;\r\n        var service = { id, Constructor: Service };\r\n        this.services[id] = this.services[id] || service;\r\n        \r\n        return this;\r\n    }\r\n    registerComponent(id, Component) {\r\n        var component = { id, Constructor: Component };\r\n        this.components[id] = this.components[id] || component;\r\n        return this;\r\n    }\r\n    define(definition) {\r\n        var { name, Class, options } = definition;\r\n        var { dConfiguration } = this, { promise: pConfiguration } = dConfiguration;\r\n        \r\n        pConfiguration\r\n            .then( (config) => this.engine.define(name, Class, options) )\r\n            ;\r\n        return this;\r\n    }\r\n    \r\n    arm(options) {  // automatically register modules\r\n        var config = this.configuration\r\n          , bootstrap = config.bootstrap\r\n          , target = options.target\r\n          ;\r\n        \r\n        this.startServices();\r\n        bootstrap.call(config, target, this);\r\n    }\r\n    \r\n    startServices() {\r\n        var config = this.configuration, decorators = config.decorators;\r\n        for (var id in this.services) this.startService(this.services[id], id, this.services);\r\n        return this;\r\n    }\r\n    private startService(_service, id, services) {\r\n        var { configuration, utils } = this, { director, decorators } = configuration;\r\n        var { services: ServiceSandbox = DefaultServicesSandbox } = decorators;\r\n        var Service = _service.Constructor\r\n          , sandbox = new ServiceSandbox(utils, director)\r\n          , service = new Service(sandbox)\r\n          ;\r\n        service.init();\r\n    }\r\n    \r\n    /**\r\n     * Gets called by this.configuration.bootstrap\r\n     * TODO: Rename `details` to `api` and provide an API for mapping, starting, stopping & destroying (etc) modules.\r\n     */\r\n    bootstrap(element, data, id) {\r\n        if (!element || !id) return null;\r\n        if (!this.components[id]) return this.utils.console.warn(\"Unregistered Component: \" + id) && null || null;\r\n        \r\n        var { configuration: config } = this\r\n          , { director, decorators } = config\r\n          , { components: ComponentSandbox = DefaultComponentSandbox } = decorators\r\n          ;\r\n        var component = this.components[id]\r\n          , Component = component.Constructor\r\n          , sandbox = new ComponentSandbox(element, director)\r\n          , instance = new Component(sandbox)\r\n          , data = data || { }\r\n          ;\r\n        var details = {\r\n            id: id,\r\n            instance: instance,\r\n            element: element,\r\n            data: data,\r\n        };\r\n        instance.init(data);\r\n        \r\n        return details;\r\n    }\r\n    \r\n}\r\n\r\nexport { Core };\r\n","\r\nimport { Core } from './core';\r\n\r\n\r\nvar Facade = function Facade(core) {\r\n    var thus = this;\r\n    \r\n    function configure() {\r\n        return core.configure.apply(core, arguments);\r\n    }\r\n    function service(Service) {\r\n        core.registerService.apply(core, arguments);\r\n        return this;\r\n    }\r\n    function element(definition) {\r\n        core.define(definition);\r\n        return this;\r\n    }\r\n    function component(id, Directive) {\r\n        core.registerComponent.apply(core, arguments);\r\n        return this;\r\n    }\r\n    \r\n    function register(item, Class) {\r\n        var type = { 'string': 'component', 'function': 'service', 'object': item.decorator }[ typeof item ];\r\n        this[type].call(this, item, Class);\r\n        return this;\r\n    }\r\n    \r\n    function bootstrap(options) {\r\n        core.init(options);\r\n        return this;\r\n    }\r\n    \r\n    // export precepts\r\n    this.utils = core.utils;\r\n    this.config = configure;\r\n    this.service = service;\r\n    this.element = element;\r\n    this.component = component;\r\n    this.register = register;\r\n    this.bootstrap = bootstrap;\r\n    \r\n    return this;\r\n};\r\n\r\n/**\r\n * API\r\n */\r\nvar Vertex = new (function Vertices(Core, Facade) {\r\n    \r\n    var V = Facade.call( function V() {\r\n        if (this instanceof V) return ( new Vertices(Core, Facade) );\r\n        return V.register.apply(V, arguments);\r\n    }, new Core() );\r\n    \r\n    return V;\r\n})(Core, Facade);\r\n\r\nexport { Vertex };\r\n","\r\nexport { Vertex as V } from './core';\r\nexport { Element, Component, Directive, Pipe, Service } from './core';\r\nexport { observe, observee, observer, element, attr, listener, message } from './core';\r\n"],"sourceRoot":""}